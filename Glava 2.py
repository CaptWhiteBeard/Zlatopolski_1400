####################################################################################
# 2.1.
####################################################################################

def A(x):
    return 17 * (x ** 2) - 6 * x + 13


def B(a):
    return 3 * (a ** 2) + 5 * a - 21

####################################################################################
# 2.2.
####################################################################################

def fun(a):
    return (a ** 2 + 10) / (a ** 2 + 1) ** (1 / 2)

####################################################################################
# 2.3.
####################################################################################

import math


def A(a):
    return math.sqrt((2 * a + math.sin(abs(3 * a))) / 3.56)


def B(x):
    return math.sin((3.2 + math.sqrt(1 + x)) / (abs(5 * x)))


####################################################################################
# 2.4.
####################################################################################

def perim(a):
    return 4 * a

####################################################################################
# 2.5.
####################################################################################

def diam(rad):
    return rad * 2

####################################################################################
# 2.6.
####################################################################################

def kacat(hight):
    R = 6350
    return ((hight + R) ** 2 + R ** 2) ** (1 / 2)

####################################################################################
# 2.7.
####################################################################################

def volcub(a):
    return a ** 3


def Sbok(a):
    return a ** 2

####################################################################################
# 2.8.
####################################################################################

import math


def lenokr(r):
    return math.pi * 2 * r


def Skrug(r):
    return math.pi * (r ** 2)

####################################################################################
# 2.9.
####################################################################################

def A(x, y):
    return 2 * x ** 3 - 3.44 * x * y + 2.3 * x ** 2 - 7.1 * y + 2


def B(a, b):
    return 3.14 * (a + b) ** 3 + 2.75 * b ** 2 - 12.7 * a - 4.1

####################################################################################
# 2.10.
####################################################################################

def SredArifm(a, b):
    return (a + b) / 2


def SredGeom(a, b):
    return (a * b) ** (1 / 2)

####################################################################################
# 2.11.	
####################################################################################

def plotnost(v, m):
    return m / v

####################################################################################
# 2.12.
####################################################################################


def PlotNasel(Sgos, Njit):
    return Njit / Sgos

####################################################################################
# 2.13.
####################################################################################

def linearEq(a, b):
    if a == 0:
        return "Нет решения"
    else:
        return -b / a

####################################################################################
# 2.14.
####################################################################################

def gipot(a, b):
    return (a ** 2 + b ** 2) ** (1 / 2)

####################################################################################
# 2.15.
####################################################################################

import math


def Skolc(Rvnesh, Rvnut):
    if Rvnesh < Rvnut:
        Rvnesh, Rvnut = Rvnut, Rvnesh
    return (math.pi * Rvnesh ** 2) - (math.pi * Rvnut ** 2)

####################################################################################
# 2.16.	
####################################################################################

def PerPrTr(a, b):
    c = (a ** 2 + b ** 2) ** (1 / 2)
    return a + b + c

####################################################################################
# 2.17.
####################################################################################

def Perim(O1, O2, h):
    if O1 > O2:
        c = (O1 - O2) / 2
    elif O2 > O1:
        c = (O2 - O1) / 2

    bok = (h ** 2 + c ** 2) ** (1 / 2)

    return bok * 2 + O1 + O2

####################################################################################
# 2.18.
####################################################################################

import math


def z(x, y):
    return (x + (2 + y) / (x ** 2)) / (y + 1 / (x ** 2 + 10) ** (1 / 2))


def q(x, y):
    return 7.25 * math.sin(x) - abs(y)

####################################################################################
# 2.19.
####################################################################################

import math


def X(a, b):
    return (2 / (a ** 2 + 25) + b) / (b ** (1 / 2) + (a + b) / 2)


def Y(a, b):
    return (abs(a) + 2 * math.sin(b)) / (5.5 * a)

####################################################################################
# 2.20.
####################################################################################

import math


def A(e, f, g):
    return math.sqrt((abs(e - 3 / f)) ** 3 + g)


def B(e, h):
    return math.sin(e) + (math.cos(h)) ** 2


def C(g, e, f):
    return 33 * g / (e * f - 3)

####################################################################################
# 2.21.
####################################################################################

import math


def A(e, f):
    return (e + f / 2) / 3


def B(h, g):
    return abs(h ** 2 - g)


def C(g, h, e):
    return ((g - h) ** 2 - 3 * math.sin(e)) ** (1 / 2)

####################################################################################
# 2.22.
####################################################################################

def SredArif(a, b):
    return (abs(a) + abs(b)) / 2


def SredGeom(a, b):
    return (abs(a) * abs(b)) ** (1 / 2)

####################################################################################
# 2.23.
####################################################################################

def PerDiag(a, b):
    Perimetr = a * 2 + b * 2
    Diag = (a ** 2 + b ** 2) ** (1 / 2)

    return Perimetr, Diag

####################################################################################
# 2.24.
####################################################################################

def MathOps(a, b):
    summ = a + b
    razn = a - b
    proizv = a * b
    chast = a / b

    return summ, razn, proizv, chast

####################################################################################
# 2.25.
####################################################################################

def VSparal(a, b, c):
    vol = a * b * c
    Sbok1 = a * b
    Sbok2 = b * c
    Sbok3 = a * c

    return vol, Sbok1, Sbok2, Sbok3

####################################################################################
# 2.26.
####################################################################################

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def calc_dist(self, another_point):
        if not isinstance(another_point, Point):
            raise ValueError("Дай мне объект класса Точка")

        return ((self.x - another_point.x) ** 2 + (self.y - another_point.y) ** 2) ** (1 / 2)

####################################################################################
# 2.27.	
####################################################################################

"""Смотри задачу 2.17"""

####################################################################################
# 2.28.	
####################################################################################

import math


def STrap(O1, O2, angle):
    if O1 > O2:
        O1, O2 = O2, O1

    while angle > 360:
        angle -= 360

    angle = angle * math.pi / 180

    return 0.5 * (O2 ** 2 - O1 ** 2) * math.tan(angle)

####################################################################################
# 2.29.
####################################################################################

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def calc_dist(self, another_point):
        if not isinstance(another_point, Point):
            raise ValueError("Дай мне объект класса Точка")

        return ((self.x - another_point.x) ** 2 + (self.y - another_point.y) ** 2) ** (1 / 2)


class Triangle:

    def __init__(self, A, B, C):  # A,B,C - это точки;  a,b,c - это стороны
        self.A = A
        self.B = B
        self.C = C

        self.a = Point.calc_dist(self.A, self.B)
        self.b = Point.calc_dist(self.B, self.C)
        self.c = Point.calc_dist(self.A, self.C)

    @property
    def Perim(self):
        return self.a + self.b + self.c

    @property
    def Square(self):  # Площадь по формуле герона
        p = self.Perim / 2
        return (p * (p - self.a) * (p - self.b) * (p - self.c)) ** (1 / 2)

####################################################################################
# 2.30.
####################################################################################

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def calc_dist(self, another_point):
        if not isinstance(another_point, Point):
            raise ValueError("Дай мне объект класса Точка")

        return ((self.x - another_point.x) ** 2 + (self.y - another_point.y) ** 2) ** (1 / 2)


class Triangle:

    def __init__(self, A, B, C):  # A,B,C - это точки;  a,b,c - это стороны
        self.A = A
        self.B = B
        self.C = C

        self.a = Point.calc_dist(self.A, self.B)
        self.b = Point.calc_dist(self.B, self.C)
        self.c = Point.calc_dist(self.A, self.C)

    @property
    def Perim(self):
        return self.a + self.b + self.c

    @property
    def Square(self):  # Площадь по формуле герона
        p = self.Perim / 2
        return (p * (p - self.a) * (p - self.b) * (p - self.c)) ** (1 / 2)


class Quadrangle:
    def __init__(self, A, B, C, D):  # 4 точки, задающих вершины этого четырёхугольника
        self.A = A
        self.B = B
        self.C = C
        self.D = D

        self.a = Point.calc_dist(self.A, self.B)
        self.b = Point.calc_dist(self.B, self.C)
        self.c = Point.calc_dist(self.D, self.C)
        self.d = Point.calc_dist(self.A, self.D)

    @property
    def Square(self):
        A1 = Triangle(self.A, self.B, self.D)
        A2 = Triangle(self.A, self.D, self.C)

        return A1.Square + A2.Square

####################################################################################
# 2.31.
####################################################################################


x = float(input("Стоимость конфет за 1 кг: "))
y = float(input("Стоимость печенья за 1 кг: "))
z = float(input("Стоимость яблок за 1 кг: "))


def cost(nx, ny, nz):
    return nx * x + ny * y + nz * z

####################################################################################
# 2.32.
####################################################################################


def cost_pc(number):
    monit = 2
    block = 4  # Это типа известная стоимость компонентов
    klava = 3
    mouse = 1
    return (monit + block + klava + mouse) * number  # А это типа расчёт стоимости комплекта

####################################################################################
# 2.33.
####################################################################################

def averege(Tanya, Mitya):
    av = (int(Tanya) + int(Mitya)) / 2
    print(f'Средний возраст: {av}')
    print(f'Возраст Тани отличается от среднего на {abs(int(Tanya) - av)}')
    print(f'Возраст Мити отличается от среднего на {abs(int(Mitya) - av)}')

####################################################################################
# 2.34.
####################################################################################

def meet_time(V1=60, V2=60, S=100):
    return f'Через {(V1 + V2) / S} ч автомобили встретятся'

####################################################################################
# 2.35.
####################################################################################

def dist_30mins(V1=80, V2=60):
    if V2 >= V1:
        print("V1 должно быть больше V2")
    else:
        return f'через 30 минут между автомобилями будет {(V1 - V2) / 0.5} км'

####################################################################################
# 2.36.
####################################################################################

def temp_converter(Celsium):
    print(f'{(Celsium * 1.8) + 32} по Фаренгейту')
    print(f'{Celsium + 273.15} по Кельвину')

####################################################################################
# 2.37.	
####################################################################################

def temp_conv(Farenheit):
    return f'{(Farenheit - 32) / 1.8} градусов Цельсия'

####################################################################################
# 2.38.
####################################################################################

def mathops(a, b):
    print(f'{a} + {b} = {a + b}')
    print(f'{a} - {b} = {a - b}')
    print(f'{a} * {b} = {a * b}')
    print(f'{a} / {b} = {a / b}')
    print(f'({a} + {b}) / 2 = {(a + b) / 2}')
