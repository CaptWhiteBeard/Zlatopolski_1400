####################################################################################
# 4.1. Даны два различных вещественных числа. Определить:
# а) какое из них больше;
# б) какое из них меньше.
####################################################################################

def compare(a, b):
    if a > b:
        return f'Число {a} больше, чем {b}'
    else:
        return f'Число {b} больше, чем {a}'

####################################################################################
# 4.2. Рассчитать значение у при заданном значении х:
# y = sin^2(x), x > 0
# y = 1 - 2 * sin(x^2), x <= 0
####################################################################################
import math


def y_func(x):
    if x > 0:
        y = (math.sin(x)) ** 2
    else:
        y = 1 - 2 * math.sin(x ** 2)
    return y

####################################################################################
# 4.3 Рассчитать значение у при заданном значении х:
# y = sin^2(x), x > 0
# y = 1 + 2 * sin(x^2), x <= 0
import math

def y_func(x):
    if x > 0:
        y = (math.sin(x)) ** 2
    else:
        y = 1 + 2 * math.sin(x ** 2)
    return y

####################################################################################
# 4.4 Определить, в какую из областей – I или II (рис. 4.1) – по-
# падает точка с заданными координатами. Для простоты принять,
# что точка не попадает на границу областей.

# (Описание рисунка - Дан график декартовой системы координат с линией x = 4.
# Область I - слева от этой линии, область II - справа от этой линии)
####################################################################################

def find_oblast(x=0, y=0):
    if x > 4:
        return f'Это область II'
    elif x < 4:
        return 'Это область I'
    elif x == 4:
        return 'Вы попали чётко на линию'

####################################################################################
# 4.5 Определить, в какую из областей – I или II (рис. 4.2) – по-
# падает точка с заданными координатами. Для простоты принять,
# что точка не попадает на границу областей.

# (Описание рисунка - Дан график декартовой системы координат с линией y = 3;
#  Область I - выше этой линии, Область II - ниже этой линии)
####################################################################################

def find_oblast(x=0, y=0):
    if y < 3:
        return f'Это область II'
    elif y > 3:
        return 'Это область I'
    elif y == 3:
        return 'Вы попали чётко на линию'

####################################################################################
# 4.6. Для функций, заданных графически (рис. 4.3), определить
# значение у при заданном значении х.
# a) y = x, x (-inf, 2)
# y = 2, x [2, +inf)
# b) y = -x, x (-inf, 3)
# y = -3, x [3, +inf)
####################################################################################

# Вариант А
def find_y(x):
    if x < 2:
        return f'y = {x}'
    else:
        return f'y = 2'


# Вариант B
def find_y(x):
    if x < 3:
        return f'y = {-x}'
    else:
        return f'y = -3'

####################################################################################
# 4.7. Составить программу для вычисления значения функции
# f(x):
# f = kx, k < x
# f = k + x, k >= x
# где
# k = x^2, sin(x) < 0
# k = abs(x), sin(x) >= 0
####################################################################################

import math


def func(x):
    if math.sin(x) < 0:
        k = x ** 2
    else:
        k = abs(x)

    if k < x:
        return k * x
    else:
        return k + x

####################################################################################
# 4.8. Составить программу для вычисления значения функции
# f(x):
# f = abs(x), x < k
# f = k*x, x >=k
# где
# k = x ** 2, sin(x) >= 0
# k = abs(x), sin(x) < 0
####################################################################################

import math


def func(x):
    if math.sin(x) < 0:
        k = abs(x)
    else:
        k = x ** 2

    if k < x:
        return abs(x)
    else:
        return k * x

####################################################################################
# 4.9. Определить максимальное и минимальное значения из
# двух различных вещественных чисел. Использовать один услов-
# ный оператор.
####################################################################################

def find_min_max(a, b):
    if a > b:
        return f'{a} - максимальное, {b} - минимальное'
    return f'{b} - максимальное, {a} - минимальное'

####################################################################################
# 4.10. Известны два расстояния: одно выражено в километрах,
# другое – в футах (1 фут = 0,3048 м). Какое из расстояний меньше?
####################################################################################

def kmetr_or_foot(kmetr, foot):
    foot_to_kmet = foot * 0.3048 / 1000
    if kmetr > foot_to_kmet:
        return f'Расстояние в километрах больше'
    elif kmetr < foot_to_kmet:
        return 'Расстояние в футах больше'
    elif kmetr == foot_to_kmet:
        return 'Расстояния равны'

