####################################################################################
# 4.1. Даны два различных вещественных числа. Определить:
# а) какое из них больше;
# б) какое из них меньше.
####################################################################################

def compare(a, b):
    if a > b:
        return f'Число {a} больше, чем {b}'
    else:
        return f'Число {b} больше, чем {a}'


####################################################################################
# 4.2. Рассчитать значение у при заданном значении х:
# y = sin^2(x), x > 0
# y = 1 - 2 * sin(x^2), x <= 0
####################################################################################
import math


def y_func(x):
    if x > 0:
        y = (math.sin(x)) ** 2
    else:
        y = 1 - 2 * math.sin(x ** 2)
    return y


####################################################################################
# 4.3 Рассчитать значение у при заданном значении х:
# y = sin^2(x), x > 0
# y = 1 + 2 * sin(x^2), x <= 0
####################################################################################

import math


def y_func(x):
    if x > 0:
        y = (math.sin(x)) ** 2
    else:
        y = 1 + 2 * math.sin(x ** 2)
    return y


####################################################################################
# 4.4 Определить, в какую из областей – I или II (рис. 4.1) – по-
# падает точка с заданными координатами. Для простоты принять,
# что точка не попадает на границу областей.

# (Описание рисунка - Дан график декартовой системы координат с линией x = 4.
# Область I - слева от этой линии, область II - справа от этой линии)
####################################################################################

def find_oblast(x=0, y=0):
    if x > 4:
        return f'Это область II'
    elif x < 4:
        return 'Это область I'
    elif x == 4:
        return 'Вы попали чётко на линию'


####################################################################################
# 4.5 Определить, в какую из областей – I или II (рис. 4.2) – по-
# падает точка с заданными координатами. Для простоты принять,
# что точка не попадает на границу областей.

# (Описание рисунка - Дан график декартовой системы координат с линией y = 3;
#  Область I - выше этой линии, Область II - ниже этой линии)
####################################################################################

def find_oblast(x=0, y=0):
    if y < 3:
        return f'Это область II'
    elif y > 3:
        return 'Это область I'
    elif y == 3:
        return 'Вы попали чётко на линию'


####################################################################################
# 4.6. Для функций, заданных графически (рис. 4.3), определить
# значение у при заданном значении х.
# a) y = x, x (-inf, 2)
# y = 2, x [2, +inf)
# b) y = -x, x (-inf, 3)
# y = -3, x [3, +inf)
####################################################################################

# Вариант А
def find_y(x):
    if x < 2:
        return f'y = {x}'
    else:
        return f'y = 2'


# Вариант B
def find_y(x):
    if x < 3:
        return f'y = {-x}'
    else:
        return f'y = -3'


####################################################################################
# 4.7. Составить программу для вычисления значения функции
# f(x):
# f = kx, k < x
# f = k + x, k >= x
# где
# k = x^2, sin(x) < 0
# k = abs(x), sin(x) >= 0
####################################################################################

import math


def func(x):
    if math.sin(x) < 0:
        k = x ** 2
    else:
        k = abs(x)

    if k < x:
        return k * x
    else:
        return k + x


####################################################################################
# 4.8. Составить программу для вычисления значения функции
# f(x):
# f = abs(x), x < k
# f = k*x, x >=k
# где
# k = x ** 2, sin(x) >= 0
# k = abs(x), sin(x) < 0
####################################################################################

import math


def func(x):
    if math.sin(x) < 0:
        k = abs(x)
    else:
        k = x ** 2

    if k < x:
        return abs(x)
    else:
        return k * x


####################################################################################
# 4.9. Определить максимальное и минимальное значения из
# двух различных вещественных чисел. Использовать один услов-
# ный оператор.
####################################################################################

def find_min_max(a, b):
    if a > b:
        return f'{a} - максимальное, {b} - минимальное'
    return f'{b} - максимальное, {a} - минимальное'

    # Таким образом соблюдается условие об одном условном операторе


####################################################################################
# 4.10. Известны два расстояния: одно выражено в километрах,
# другое – в футах (1 фут = 0,3048 м). Какое из расстояний меньше?
####################################################################################

def kmetr_or_foot(kmetr, foot):
    foot_to_kmet = foot * 0.3048 / 1000
    if kmetr > foot_to_kmet:
        return f'Расстояние в километрах больше'
    elif kmetr < foot_to_kmet:
        return 'Расстояние в футах больше'
    elif kmetr == foot_to_kmet:
        return 'Расстояния равны'


####################################################################################
# 4.11. Известны две скорости: одна выражена в километрах
# в час, другая – в метрах в секунду. Какая из скоростей больше?
####################################################################################

def which_V_is_bigger(kmph, mps):
    kmph_to_mps = kmph / 3.6

    if kmph_to_mps > mps:
        return f'Скорость км/ч больше, чем м/с'
    elif kmph_to_mps < mps:
        return f'Скорость м/с больше, чем км/ч'
    elif kmph_to_mps == mps:
        return f'Скорости равны'


####################################################################################
# 4.12. Даны радиус круга и сторона квадрата. У какой фигуры
# площадь больше?
####################################################################################
import math


# Для удобства полагаем, что данные находятся в единых единицах измерения

def Ssquare_or_Scirle(square_a, circle_r):
    Ssquare = square_a ** 2
    Scircle = math.pi * (circle_r ** 2)

    if Ssquare > Scircle:
        return f'Площадь квадрата больше, чем круга'
    elif Ssquare < Scircle:
        return f'Площадь круга больше, чем квадрата'
    elif Ssquare == Scircle:
        return f'Площади равны'


####################################################################################
# 4.13. Даны объемы и массы двух тел из разных материалов.
# Материал какого из тел имеет большую плотность?
####################################################################################

def density(m1, v1, m2, v2):
    den1 = m1 / v1
    den2 = m2 / v2

    if den1 > den2:
        return f'Плотность первого тела больше, чем второго'
    elif den1 < den2:
        return f'Плотность второго тела больше, чем первого'
    elif den1 == den2:
        return f'Плотности равны'


####################################################################################
# 4.14. Известны сопротивления двух не соединенных друг
# с другом участков электрической цепи и напряжение на каждом
# из них. По какому участку протекает меньший ток?
####################################################################################

def current(r1, r2, u1, u2):
    i1 = u1 / r1
    i2 = u2 / r2

    if i1 > i2:
        return f'Ток первого участка больше, чем второго'
    elif i1 < i2:
        return f'Ток второго участка больше, чем первого'
    elif i2 == i2:
        return f'Токи равны'


####################################################################################
# 4.15. Даны коэффициенты a, b и c квадратного уравнения
# aх2 + bx + c = 0 (а ≠ 0). Выяснить, имеет это уравнение корни или
# нет (сами корни, если они есть, вычислять не нужно).
####################################################################################

def discriminant(a, b, c):
    if a == 0:
        return f'Коэффициент не подходит под условие задачи'

    discrim = b ** 2 - 4 * a * c

    if discrim > 0:
        return f'Уравнение имеет 2 корня'
    elif discrim < 0:
        return f'Уравнение не имеет корней'
    elif discrim == 0:
        return f'Уравнение имеет 1 корень'


####################################################################################
# 4.16. Для условий предыдущей задачи в случае наличия ве-
# щественных корней найти их, в противном случае – вывести на
# экран соответствующее сообщение. Вариант равенства корней от-
# дельно не рассматривать.
####################################################################################
import math


def find_roots(a, b, c):
    if a == 0:
        return f'Коэффициент не подходит под условие задачи'

    discrim = b ** 2 - 4 * a * c

    if discrim >= 0:
        x1 = (-b + math.sqrt(discrim)) / (2 * a)
        x2 = (-b - math.sqrt(discrim)) / (2 * a)

        return f'Корень №1: {x1}, ' \
               f'Корень №2: {x2}'

    elif discrim < 0:
        return f'Корней нет'


####################################################################################
# 4.17. Известны год и номер месяца рождения человека, а так-
# же год и номер месяца сегодняшнего дня (январь – 1 и т. д.). Опре-
# делить возраст человека (число полных лет). В случае совпадения
# указанных номеров месяцев считать, что прошел полный год.
####################################################################################

def find_age(year, month, year_today, month_today):
    if 0 > month > 13 or 0 > month_today > 13 or not isinstance(month, int) or not isinstance(month_today, int) \
            or not isinstance(year, int) or not isinstance(year_today, int):
        return 'Некорректно ведены данные'

    if month > month_today:
        full_year = year_today - year - 1
    elif month <= month_today:
        full_year = year_today - year

    return f'Человеку {full_year} полных лет'

####################################################################################
# 4.18. Известны площади круга и квадрата. Определить:
# а) уместится ли круг в квадрате?
# б) уместится ли квадрат в круге?
####################################################################################
import math

def fit_in(Ssquare, Scircle):
    ans = []

    a = math.sqrt(Ssquare)
    r = math.sqrt(Scircle / math.pi)
    diam = 2 * r
    diag = math.sqrt(a**2 + a ** 2)

    if diam <= a:
        ans.append('Круг вместится в квадрат')
    else:
        ans.append('Круг НЕ вместится в квадрат')

    if diag <= diam:
        ans.append('Квадрат вместится в круг')
    else:
        ans.append('Квадрат НЕ вместится в круг')

    return ans


####################################################################################
# 4.19. Известны площади круга и равностороннего треугольни-
# ка. Определить:
# а) уместится ли круг в треугольнике?
# б) уместится ли треугольник в круге?
####################################################################################

